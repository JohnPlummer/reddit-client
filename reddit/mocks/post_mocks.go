// Code generated by MockGen. DO NOT EDIT.
// Source: post.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	reddit "github.com/JohnPlummer/reddit-client/reddit"
	gomock "github.com/golang/mock/gomock"
)

// MockcommentGetter is a mock of commentGetter interface.
type MockcommentGetter struct {
	ctrl     *gomock.Controller
	recorder *MockcommentGetterMockRecorder
}

// MockcommentGetterMockRecorder is the mock recorder for MockcommentGetter.
type MockcommentGetterMockRecorder struct {
	mock *MockcommentGetter
}

// NewMockcommentGetter creates a new mock instance.
func NewMockcommentGetter(ctrl *gomock.Controller) *MockcommentGetter {
	mock := &MockcommentGetter{ctrl: ctrl}
	mock.recorder = &MockcommentGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcommentGetter) EXPECT() *MockcommentGetterMockRecorder {
	return m.recorder
}

// getComments mocks base method.
func (m *MockcommentGetter) getComments(ctx context.Context, subreddit, postID string, opts ...reddit.CommentOption) ([]interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, subreddit, postID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "getComments", varargs...)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getComments indicates an expected call of getComments.
func (mr *MockcommentGetterMockRecorder) getComments(ctx, subreddit, postID interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, subreddit, postID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getComments", reflect.TypeOf((*MockcommentGetter)(nil).getComments), varargs...)
}

// MockCommentGetter is a mock of CommentGetter interface.
type MockCommentGetter struct {
	ctrl     *gomock.Controller
	recorder *MockCommentGetterMockRecorder
}

// MockCommentGetterMockRecorder is the mock recorder for MockCommentGetter.
type MockCommentGetterMockRecorder struct {
	mock *MockCommentGetter
}

// NewMockCommentGetter creates a new mock instance.
func NewMockCommentGetter(ctrl *gomock.Controller) *MockCommentGetter {
	mock := &MockCommentGetter{ctrl: ctrl}
	mock.recorder = &MockCommentGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentGetter) EXPECT() *MockCommentGetterMockRecorder {
	return m.recorder
}

// GetComments mocks base method.
func (m *MockCommentGetter) GetComments(ctx context.Context, subreddit, postID string, params map[string]string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", ctx, subreddit, postID, params)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockCommentGetterMockRecorder) GetComments(ctx, subreddit, postID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockCommentGetter)(nil).GetComments), ctx, subreddit, postID, params)
}
