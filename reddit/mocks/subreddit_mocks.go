// Code generated by MockGen. DO NOT EDIT.
// Source: reddit/subreddit.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	reddit "github.com/JohnPlummer/reddit-client/reddit"
	gomock "github.com/golang/mock/gomock"
)

// MockPostGetter is a mock of PostGetter interface.
type MockPostGetter struct {
	ctrl     *gomock.Controller
	recorder *MockPostGetterMockRecorder
}

// MockPostGetterMockRecorder is the mock recorder for MockPostGetter.
type MockPostGetterMockRecorder struct {
	mock *MockPostGetter
}

// NewMockPostGetter creates a new mock instance.
func NewMockPostGetter(ctrl *gomock.Controller) *MockPostGetter {
	mock := &MockPostGetter{ctrl: ctrl}
	mock.recorder = &MockPostGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostGetter) EXPECT() *MockPostGetterMockRecorder {
	return m.recorder
}

// GetPosts mocks base method.
func (m *MockPostGetter) GetPosts(subreddit string, params map[string]string) ([]reddit.Post, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", subreddit, params)
	ret0, _ := ret[0].([]reddit.Post)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockPostGetterMockRecorder) GetPosts(subreddit, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockPostGetter)(nil).GetPosts), subreddit, params)
}
