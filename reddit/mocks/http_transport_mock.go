// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/JohnPlummer/reddit-client/reddit (interfaces: HTTPTransport)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHTTPTransport is a mock of HTTPTransport interface.
type MockHTTPTransport struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPTransportMockRecorder
}

// MockHTTPTransportMockRecorder is the mock recorder for MockHTTPTransport.
type MockHTTPTransportMockRecorder struct {
	mock *MockHTTPTransport
}

// NewMockHTTPTransport creates a new mock instance.
func NewMockHTTPTransport(ctrl *gomock.Controller) *MockHTTPTransport {
	mock := &MockHTTPTransport{ctrl: ctrl}
	mock.recorder = &MockHTTPTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPTransport) EXPECT() *MockHTTPTransportMockRecorder {
	return m.recorder
}

// RoundTrip mocks base method.
func (m *MockHTTPTransport) RoundTrip(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoundTrip", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoundTrip indicates an expected call of RoundTrip.
func (mr *MockHTTPTransportMockRecorder) RoundTrip(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoundTrip", reflect.TypeOf((*MockHTTPTransport)(nil).RoundTrip), arg0)
}
